pipeline {
  agent any

  environment {
    GITHUB_CREDENTIALS = credentials('GITHUB_CREDENTIALS_ID')
    DOCKERHUB_CRED = credentials('DOCKERHUB_CREDENTIAL_ID')
    IMAGE_NAME = "joel208/messaging_app"
    IMAGE_TAG = "${env.BUILD_NUMBER}"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main',
            credentialsId: 'GITHUB_CREDENTIALS_ID',
            url: 'https://github.com/Joel-Masiaga/alx-backend-python.git'
      }
    }

    stage('Prepare') {
      steps {
        sh '''
          python3 -m venv .venv
          . .venv/bin/activate
          pip3 install --upgrade pip
          pip3 install -r messaging_app/requirements.txt || true
          pip3 install pytest pytest-cov
        '''
      }
    }

    stage('Run Tests') {
      steps {
        sh '''
          . .venv/bin/activate
          mkdir -p test-reports
          pytest --junitxml=test-reports/junit.xml --cov=messaging_app --cov-report=xml || true
        '''
        junit 'test-reports/junit.xml'
        publishHTML (target: [
          allowMissing: true,
          alwaysLinkToLastBuild: true,
          keepAll: true,
          reportDir: 'htmlcov',
          reportFiles: 'index.html',
          reportName: 'Coverage Report'
        ])
      }
    }

    stage('Lint') {
      steps {
        sh '''
          . .venv/bin/activate
          pip3 install flake8
          flake8 || true
        '''
      }
    }

    stage('Build Docker Image') {
      steps {
        script { 
          sh """
            docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -f Dockerfile .
          """
        }
      }
    }

    stage('Push Docker Image') {
      steps {
        script {
          sh """
            echo ${DOCKERHUB_CRED_PSW} | docker login -u ${DOCKERHUB_CRED_USR} --password-stdin
            docker push ${IMAGE_NAME}:${IMAGE_TAG}
          """
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'test-reports/**', allowEmptyArchive: true
      cleanWs()
    }
  }
}
